import { CSSProperties } from '@pigment-css/core';
import * as CSS from 'csstype';

type CSSPropertiesWithCallback<Props extends object> = {
  [K in keyof CSSProperties]:
    | CSSProperties[K]
    | Array<Extract<CSSProperties[K], string>>
    | ((props: Props) => CSSProperties[K]);
};

type CSSPseudos<Props extends object> = {
  [K in CSS.Pseudos]?: CSSObject<Props>;
};

interface CSSOthersObject<Props extends object> {
  [selector: string]: CSSObject<Props>;
}

export type CSSObject<Props extends object> =
  | CSSPropertiesWithCallback<Props>
  | CSSPseudos<Props>
  | CSSOthersObject<Props>;

type PolymorphicProps<E extends React.ElementType> = React.PropsWithChildren<
  React.ComponentPropsWithoutRef<E> & {
    as?: E;
  }
>;

type Variants<Props extends object> = {
  [VariantGroup: string]: {
    [VariantName: string]: CSSObject<Props>;
  };
};

type VariantNames<Props extends object, T extends Variants<Props>> = {
  [K in keyof T]?: keyof T[K];
};

type CompoundVariant<Props extends object, T extends Variants<Props>> = VariantNames<Props, T> & {
  css: CSSObject<Props>;
};

export function styled<
  Component extends React.ElementType,
  ComponentProps extends { className?: string } = React.ComponentPropsWithoutRef<Component>,
>(c: Component, opts?: unknown) {
  function css<T extends Variants<ComponentProps>, VarProps = VariantNames<ComponentProps, T>>(
    style: CSSObject<ComponentProps> & {
      variants?: T;
      compoundVariants?: CompoundVariant<ComponentProps, T>;
    },
  ) {
    console.log(opts, style);
    function Comp<
      AsTarget extends React.ElementType = Component,
      Props extends object = PolymorphicProps<AsTarget>,
    >({ as: asProp, ...rest }: Props & VarProps) {
      const Component = asProp ?? c;
      return <Component {...rest} />;
    }
    return Comp;
  }
  return css;
}

export const Button = styled('button')({
  color: 'red',
  backgroundColor: (props) => {
    if (props.type === 'button') {
      return 'blue';
    }
    return 'red';
  },
  variants: {
    hue: {
      primary: {
        color: 'red',
        backgroundColor: 'blue',
      },
    },
  },
});

<Button>Hello</Button>;
